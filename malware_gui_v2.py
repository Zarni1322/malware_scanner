import yara
import hashlib
import tkinter as tk
from tkinter import filedialog
import os
import requests

VIRUSTOTAL_API_KEY = "40df563c477e7732629d1bdbb666894568c359ea9e0ec3af0f48639bfacdd3d1"

def calculate_file_hash(file_path, hash_algorithm="sha256"):
    hasher = hashlib.new(hash_algorithm)
    with open(file_path, "rb") as f:
        while chunk := f.read(8192):
            hasher.update(chunk)
    return hasher.hexdigest()

def save_hash_to_file(file_path, hash_value):
    filename = os.path.basename(file_path)
    with open(filename + "_hash.txt", "w") as f:
        f.write(hash_value)

def scan_file(file_path, yara_rules_path):
    rules = yara.compile(filepath=yara_rules_path)
    matches = rules.match(filepath=file_path)
    return matches

def scan_file_with_virustotal(file_path):
    url = "https://www.virustotal.com/vtapi/v2/file/scan"
    params = {'apikey': VIRUSTOTAL_API_KEY}
    files = {'file': (os.path.basename(file_path), open(file_path, 'rb'))}

    response = requests.post(url, files=files, params=params)
    return response.json()

def browse_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        entry_file.delete(0, tk.END)
        entry_file.insert(0, file_path)

def scan_clicked():
    file_to_scan = entry_file.get()
    yara_rules = "rules/yara/index.yar"
    hash_algorithm = "sha256"

    calculated_hash = calculate_file_hash(file_to_scan, hash_algorithm)
    hash_label.config(text=f"{hash_algorithm.upper()} hash: {calculated_hash}")
    save_hash_to_file(file_to_scan, calculated_hash)

    # Scan the file with VirusTotal
    virustotal_response = scan_file_with_virustotal(file_to_scan)
    virustotal_scan_id = virustotal_response.get("scan_id", "")

    scan_results = scan_file(file_to_scan, yara_rules)

    if virustotal_scan_id:
        result_text.delete(1.0, tk.END)
        result_text.insert(tk.END, f"VirusTotal Scan ID: {virustotal_scan_id}\n\n")

    if scan_results:
        result_label.config(text="Malicious content detected.")
        result_text.delete(1.0, tk.END)
        for match in scan_results:
            result_text.insert(tk.END, match.rule + "\n")
    else:
        result_label.config(text="No malicious content detected.")

root = tk.Tk()
root.title("Malware Scanner")

# Create GUI elements
label_file = tk.Label(root, text="Select File to Scan:")
entry_file = tk.Entry(root, width=50)
browse_button = tk.Button(root, text="Browse", command=browse_file)
scan_button = tk.Button(root, text="Scan", command=scan_clicked)
hash_label = tk.Label(root, text="")
result_label = tk.Label(root, text="")
result_text = tk.Text(root, height=20, width=50)

# Arrange GUI elements using grid layout
label_file.grid(row=0, column=0, padx=10, pady=5)
entry_file.grid(row=0, column=1, padx=10, pady=5)
browse_button.grid(row=0, column=2, padx=10, pady=5)
scan_button.grid(row=1, column=0, columnspan=3, padx=10, pady=5)
hash_label.grid(row=2, column=0, columnspan=3, padx=10, pady=5)
result_label.grid(row=3, column=0, columnspan=3, padx=10, pady=5)
result_text.grid(row=4, column=0, columnspan=3, padx=10, pady=5)

root.mainloop()
